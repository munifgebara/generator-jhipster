    }

     @PostMapping("/arquivo")
    public String handleFileUpload(@RequestParam("file") MultipartFile file) {
        try {
            System.out.println("----->"+file);
            FileOutputStream fileOutputStream = new FileOutputStream("/home/munif/arquivo.png");
            InputStream inputStream = file.getInputStream();
            IOUtils.copy(inputStream, fileOutputStream);
            inputStream.close();
            fileOutputStream.close();
            return "OK";
        } catch (FileNotFoundException ex) {
            java.util.logging.Logger.getLogger(PessoaResource.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(PessoaResource.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "problemas";
    }



 <div class="form-group">
        <label class="form-control-label" for="field_foto">Foto</label>
        <div>
            <img [src]="'data:' + selecionado.fotoContentType + ';base64,' + selecionado.foto" style="max-height: 100px;" *ngIf="selecionado.foto"
                alt="selecionado image" />
            <div *ngIf="selecionado.foto" class="form-text text-danger clearfix">
                <span class="pull-left">{{selecionado.fotoContentType}}, {{byteSize(selecionado.foto)}}</span>
                <button type="button" (click)="clearInputImage('foto', 'fotoContentType', 'fileImage')" class="btn btn-default btn-xs pull-right">
                        <span class="fa fa-times"></span>
                    </button>
            </div>
            <input type="file" id="file_foto" (change)="setFileData($event, selecionado, 'foto', true)" accept="image/*" />
        </div>
        <input type="hidden" class="form-control" name="foto" id="field_foto" [(ngModel)]="selecionado.foto" />
        <input type="hidden" class="form-control" name="fotoContentType" id="field_fotoContentType" [(ngModel)]="selecionado.fotoContentType"
        />
    </div>
    <h3 class="first">Advanced</h3>
    <p-fileUpload name="file" url="http://localhost:8080/api/pessoas/arquivo" (onBeforeSend)="onBeforeSend($event)"  (onUpload)="onUpload($event)" multiple="multiple" accept="image/*" maxFileSize="1000000">
        <ng-template pTemplate type="content">
            <ul *ngIf="uploadedFiles.length">
                <li *ngFor="let file of uploadedFiles">{{file.name}} - {{file.size}} bytes</li>
            </ul>
        </ng-template>
    </p-fileUpload>


import { Component, OnInit, ElementRef } from '@angular/core';
import { Router, ActivatedRoute, Params } from '@angular/router';
import { Location } from '@angular/common';
import { PessoaService } from '../service';
import { SuperDetalhes } from '../../comum/superdetalhes.component';
import { JhiEventManager, JhiAlertService, JhiDataUtils } from 'ng-jhipster';




//EstadoCivil estadoCivil
//Nacionalidade nacionalidade
//Sexo sexo
//Cidade cidade


import { EstadoCivilService } from '../../estado-civil/service';
import { NacionalidadeService } from '../../nacionalidade/service';
import { SexoService } from '../../sexo/service';
import { CidadeService } from '../../cidade/service';
import { Message } from "primeng/primeng";



@Component({
  selector: 'app-detalhes',
  templateUrl: './detalhes.component.html',
  styleUrls: ['./detalhes.component.css']
})

export class DetalhesComponent extends SuperDetalhes implements OnInit {

  isSaving: boolean;

  constructor(service: PessoaService,
    router: Router, route: ActivatedRoute,
    private estadoCivilService: EstadoCivilService, private nacionalidadeService: NacionalidadeService,
    private sexoService: SexoService, private cidadeService: CidadeService,
    private dataUtils: JhiDataUtils,
    private elementRef: ElementRef

  ) {
    super(service, router, route);
  }

  ngOnInit() {
    super.ngOnInit();
    this.atualizaEstadoCivil();
    this.atualizaNacionalidade();
    this.atualizaSexo();
    this.atualizaCidade();
    this.isSaving = false;
  }

   msgs: Message[];
    
    uploadedFiles: any[] = [];
    
   onBeforeSend(event) {
       console.log("----->",event);
    event.xhr.setRequestHeader("Authorization", "Bearer " + this.service.autorizador.getToken());
  }

    onUpload(event) {
        for(let file of event.files) {
            this.uploadedFiles.push(file);
        }
    
        this.msgs = [];
        this.msgs.push({severity: 'info', summary: 'File Uploaded', detail: ''});
    }

  byteSize(field) {
    return this.dataUtils.byteSize(field);
  }

  openFile(contentType, field) {
    return this.dataUtils.openFile(contentType, field);
  }

  setFileData(event, entity, field, isImage) {
    this.dataUtils.setFileData(event, entity, field, isImage);
  }

  clearInputImage(field: string, fieldContentType: string, idInput: string) {
    this.dataUtils.clearInputImage(this.selecionado, this.elementRef, field, fieldContentType, idInput);
  }

  listaestadoCivils = [];

  atualizaEstadoCivil() {
    this.estadoCivilService.getAll().then(response => { this.listaestadoCivils = this.converteEstadoCivil(response.values); });
  }

  converteEstadoCivil(lista: any[]) {
    let retorno = [];
    retorno.push({ label: 'Selecione', value: null });
    for (let obj of lista) {
      retorno.push({ label: obj.descricao, value: obj });
    }
    return retorno;
  }

  listanacionalidades = [];

  atualizaNacionalidade() {
    this.nacionalidadeService.getAll().then(response => { this.listanacionalidades = this.converteNacionalidade(response.values); });
  }

  converteNacionalidade(lista: any[]) {
    let retorno = [];
    retorno.push({ label: 'Selecione', value: null });
    for (let obj of lista) {
      retorno.push({ label: obj.descricao, value: obj });
    }
    return retorno;
  }

  listasexos = [];

  atualizaSexo() {
    this.sexoService.getAll().then(response => { this.listasexos = this.converteSexo(response.values); });
  }

  converteSexo(lista: any[]) {
    let retorno = [];
    retorno.push({ label: 'Selecione', value: null });
    for (let obj of lista) {
      retorno.push({ label: obj.descricao, value: obj });
    }
    return retorno;
  }

  listacidades = [];

  atualizaCidade() {
    this.cidadeService.getAll().then(response => { this.listacidades = this.converteCidade(response.values); });
  }

  converteCidade(lista: any[]) {
    let retorno = [];
    retorno.push({ label: 'Selecione', value: null });
    for (let obj of lista) {
      retorno.push({ label: obj.nome, value: obj });
    }
    return retorno;
  }

}



jhipster --skip-install

find -printf "%TY-%Tm-%Td %TT %p\n" | sort -n

rename 's/^/_/' *.ts


 git reset --hard 
 git clean -fd

<%= entityAngularName %>


import { <%= entityAngularName %> } from './<%= entityFileName %>.model';


<%= entityUrl %>


public class ExceptionTranslator implements ProblemHandling,DataIntegrityViolationExceptionTrait {


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.myapp.web.rest.errors;

import com.google.gag.annotation.remark.Facepalm;
import com.google.gag.annotation.remark.WTF;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.NativeWebRequest;
import org.zalando.problem.Problem;
import org.zalando.problem.Status;
import org.zalando.problem.spring.web.advice.AdviceTrait;
import javax.annotation.Nullable;
import org.springframework.dao.DataIntegrityViolationException;

/**
 *
 * @author munif
 */
public interface DataIntegrityViolationExceptionTrait extends AdviceTrait {

    @ExceptionHandler
    default ResponseEntity<Problem> handleRequestMethodNotSupportedException(final DataIntegrityViolationException exception, final NativeWebRequest request) {
        final HttpHeaders headers = new HttpHeaders();
        return create(Status.PRECONDITION_FAILED, exception, request, headers);
    }

}


package com.mycompany.myapp.web.rest;

import com.mycompany.myapp.OriginalApp;
import com.mycompany.myapp.domain.Categoria;
import com.mycompany.myapp.domain.Produto;
import com.mycompany.myapp.repository.CategoriaRepository;
import com.mycompany.myapp.repository.ProdutoRepository;
import com.mycompany.myapp.service.CategoriaService;
import com.mycompany.myapp.service.ProdutoService;
import com.mycompany.myapp.service.mapper.CategoriaMapper;
import com.mycompany.myapp.web.rest.errors.ExceptionTranslator;
import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import com.mycompany.myapp.web.rest.errors.ExceptionTranslator;
import org.springframework.dao.DataIntegrityViolationException;

/**
 * Test class for the CategoriaResource REST controller.
 *
 * @see CategoriaResource
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = OriginalApp.class)
public class ReferenceResourceIntTest {

    private static final String DEFAULT_NOME = "AAAAAAAAAA";
    private static final String UPDATED_NOME = "BBBBBBBBBB";

    @Autowired
    private CategoriaRepository categoriaRepository;

    @Autowired
    private ProdutoRepository produtoRepository;

    @Autowired
    private CategoriaMapper categoriaMapper;

    @Autowired
    private CategoriaService categoriaService;

    @Autowired
    private ProdutoService produtoService;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    @Autowired
    private EntityManager em;

    private MockMvc restCategoriaMockMvc;

    private MockMvc restProdutoMockMvc;

    private Categoria cat;
    private Produto p1;

    @Before
    public void initTest() {
        cat = new Categoria().nome(DEFAULT_NOME);
        categoriaRepository.saveAndFlush(cat);
        p1 = new Produto().categoria(cat).nome(DEFAULT_NOME).quantidade(11);
        produtoRepository.saveAndFlush(p1);
    }

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        final CategoriaResource categoriaResource = new CategoriaResource(categoriaService);
        this.restCategoriaMockMvc = MockMvcBuilders.standaloneSetup(categoriaResource)
                .setCustomArgumentResolvers(pageableArgumentResolver)
                .setControllerAdvice(exceptionTranslator)
                .setMessageConverters(jacksonMessageConverter).build();

        final ProdutoResource produtoResource = new ProdutoResource(produtoService);
        this.restProdutoMockMvc = MockMvcBuilders.standaloneSetup(produtoResource)
                .setCustomArgumentResolvers(pageableArgumentResolver)
                .setControllerAdvice(exceptionTranslator)
                .setMessageConverters(jacksonMessageConverter).build();
    }

    private List<Categoria> findAll() {
        Iterable<Categoria> findAll = categoriaRepository.findAll();

        List<Categoria> result = new ArrayList<>();
        for (Categoria r : findAll) {
            result.add(r);
        }

        return result;
    }

     @Test
    @Transactional
    public void deleteCategoria() throws Exception {

        // Get the categoria
        restCategoriaMockMvc.perform(delete("/api/categorias/{id}", cat.getId()))
            .andExpect(status().isNotFound());
        
    }
}




   
    private static final Logger log = LoggerFactory.getLogger(SeedEmpleados.class);
    
    @Autowired
    private PaisRepository paisRepository;
    
    @Autowired
    private EstadoRepository estadoRepository;

    @Autowired
    private CidadeRepository cidadeRepository;
    
    @Autowired
    private EstadoCivilRepository estadoCivilRepository;
    
    @Autowired
    private NacionalidadeRepository nacionalidadeRepository;
    
    @Autowired
    private SexoRepository sexoRepository;
    
    @Autowired
    private TipoObservacaoRepository tipoObservacaoRepository;
    
    @Autowired
    private TipoParentescoRepository tipoParentescoRepository;

    @Transactional
    public void seed(){
        log.info("Starting seed");
        
        VicThreadScope.gi.set("SEED");
        VicThreadScope.ui.set("SEED");
        VicThreadScope.ip.set("127.0.0.1");
        VicThreadScope.defaultRights.set(RightsHelper.OTHER_READ);
        if (paisRepository.count()>0){
            return;
        }
        log.info("Inserting data");
        
        Pais brasil=new Pais("Brasil");
        Pais argentina=new Pais("Argentina");
        Pais paraguai=new Pais("Paraguai");
        
        paisRepository.saveAndFlush(brasil);
        paisRepository.saveAndFlush(argentina);
        paisRepository.saveAndFlush(paraguai);
        
        Estado e0=new Estado().nome("Santa Catarina").pais(brasil);
        Estado e1=new Estado().nome("Paraná").pais(brasil);
        Estado e2=new Estado().nome("São Paulo").pais(brasil);
        
        Estado e3=new Estado().nome("Amambay").pais(paraguai);
        Estado e4=new Estado().nome("Distrito").pais(paraguai);
        Estado e5=new Estado().nome("Boquerón").pais(paraguai);
        
        Estado e6=new Estado().nome("Central").pais(argentina);
        Estado e7=new Estado().nome("Novo Cuyo").pais(argentina);
        Estado e8=new Estado().nome("Patagônia").pais(argentina);
        
        estadoRepository.saveAndFlush(e0);
        estadoRepository.saveAndFlush(e1);
        estadoRepository.saveAndFlush(e2);
        estadoRepository.saveAndFlush(e3);
        estadoRepository.saveAndFlush(e4);
        estadoRepository.saveAndFlush(e5);
        estadoRepository.saveAndFlush(e6);
        estadoRepository.saveAndFlush(e7);
        estadoRepository.saveAndFlush(e8);
        
        cidadeRepository.saveAndFlush(new Cidade().estado(e0).nome("FLorianópilis"));
        cidadeRepository.saveAndFlush(new Cidade().estado(e1).nome("Maringá"));
        cidadeRepository.saveAndFlush(new Cidade().estado(e2).nome("Rio Preto"));
        cidadeRepository.saveAndFlush(new Cidade().estado(e3).nome("Cidade A"));
        cidadeRepository.saveAndFlush(new Cidade().estado(e4).nome("Cidade B"));
        cidadeRepository.saveAndFlush(new Cidade().estado(e5).nome("Cidade C"));
        cidadeRepository.saveAndFlush(new Cidade().estado(e6).nome("Cidade D"));
        cidadeRepository.saveAndFlush(new Cidade().estado(e7).nome("Cidade E"));
        
        nacionalidadeRepository.saveAndFlush(new Nacionalidade().descricao("Brasileira"));
        nacionalidadeRepository.saveAndFlush(new Nacionalidade().descricao("Argentina"));
        nacionalidadeRepository.saveAndFlush(new Nacionalidade().descricao("Paraguaia"));
        
        estadoCivilRepository.saveAndFlush(new EstadoCivil().descricao("Casado"));
        estadoCivilRepository.saveAndFlush(new EstadoCivil().descricao("Solteiro"));
        
        sexoRepository.saveAndFlush(new Sexo().descricao("Masculino"));
        sexoRepository.saveAndFlush(new Sexo().descricao("Feminino"));
        
        tipoObservacaoRepository.saveAndFlush(new TipoObservacao().descricao("Falta de documentos"));
        tipoObservacaoRepository.saveAndFlush(new TipoObservacao().descricao("Doença"));
        tipoObservacaoRepository.saveAndFlush(new TipoObservacao().descricao("Outros"));
        
        tipoParentescoRepository.saveAndFlush(new TipoParentesco("Filho"));
        tipoParentescoRepository.saveAndFlush(new TipoParentesco("Pai"));
        
        
        
        
        
        
        
    }



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.munif.sistemas.seed;

import br.com.munif.sistemas.domain.Documento;
import br.com.munif.sistemas.domain.EstadoCivil;
import br.com.munif.sistemas.domain.Nacionalidade;
import br.com.munif.sistemas.domain.Pessoa;
import br.com.munif.sistemas.domain.Sexo;
import br.com.munif.sistemas.repository.NacionalidadeRepository;
import br.com.munif.sistemas.repository.PessoaRepository;
import com.healthmarketscience.jackcess.Column;
import com.healthmarketscience.jackcess.DatabaseBuilder;
import com.healthmarketscience.jackcess.Row;
import com.healthmarketscience.jackcess.Table;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author munif
 */
@Component
public class MigraAccess {

    private static final Logger log = LoggerFactory.getLogger(SeedOne.class);

    @Autowired
    private PessoaRepository pessoaRepository;

    @Autowired
    private NacionalidadeRepository nacionalidadeRepository;

    @PersistenceContext
    private EntityManager em;

    private Object recuperaOuCria(Class classe, String atributo, Object valor) {
        try {
            Query q = em.createQuery("from " + classe.getSimpleName() + " obj where obj." + atributo + "=:v");
            q.setParameter("v", valor);
            List resultList = q.getResultList();
            if (resultList.isEmpty()) {
                Object newInstance = classe.newInstance();
                Field declaredField = classe.getDeclaredField(atributo);
                declaredField.setAccessible(true);
                declaredField.set(newInstance, valor);
                em.persist(newInstance);
                em.flush();
                return newInstance;
            }
            return resultList.get(0);
        } catch (Exception ex) {
            log.trace("Recupera Ou Cria", ex);
        }
        return null;
    }

    @Transactional
    public void migra() {
        ZoneId systemDefault = ZoneId.systemDefault();
        try {
            Set<String> tableNames = DatabaseBuilder.open(new File(System.getProperty("user.home") + "/munifsaas/empleados_rev13.mdb")).getTableNames();
            String s = "empleados";
            log.info("----- TABELA " + s);
            Table table = DatabaseBuilder.open(new File(System.getProperty("user.home") + "/munifsaas/empleados_rev13.mdb")).getTable(s);
            List<? extends Column> columns = table.getColumns();
            for (Row r : table) {
                String n = sinonimo(r.getString("nacionalidad"));
                Nacionalidade nacionalidade = (Nacionalidade) recuperaOuCria(Nacionalidade.class, "descricao", n);
                EstadoCivil estadoCivil = (EstadoCivil) recuperaOuCria(EstadoCivil.class, "descricao", sinonimo("ES" + r.getString("estadocivil")));
                Sexo sexo = (Sexo) recuperaOuCria(Sexo.class, "descricao", sinonimo(r.getString("sexo")));
                String nomeInteiro = r.getString("nombre");
                String primeiroNome = nomeInteiro;
                String sobreNome = "";
                if (nomeInteiro != null && nomeInteiro.contains(" ")) {
                    primeiroNome = nomeInteiro.substring(0, nomeInteiro.indexOf(" "));
                    sobreNome = nomeInteiro.substring(nomeInteiro.indexOf(" ") + 1);
                }
                Pessoa p = new Pessoa().nome(primeiroNome).apelido(r.getString("apellido")).nacionalidade(nacionalidade).estadoCivil(estadoCivil).sexo(sexo).sobreNome(sobreNome);
                Date date = r.getDate("nascido-en");
                if (date != null) {
                    p.setDataNascimento(ZonedDateTime.ofInstant(date.toInstant(), systemDefault));
                }
                em.persist(p);
                Documento d=new Documento(r.getString("documento"));
                em.flush();
            }
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(MigraAccess.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private String sinonimo(String p) {
        for (int i = 0; i < SINONIMOS.length; i += 2) {
            if (p.equalsIgnoreCase(SINONIMOS[i])) {
                return SINONIMOS[i + 1];
            }
        }
        return p;

    }

    private String SINONIMOS[] = {
        "Brasileira", "Brasileira",
        "Argentina", "Argentina",
        "Paraguaia", "Paraguaia",
        "Paraguaya", "Paraguaia",
        "Brasilera", "Paraguaia",
        "Paragauaya", "Paraguaia",
        "Pargauaya", "Paraguaia",
        "Paraguaya.-", "Paraguaia",
        "Paraguaaya", "Paraguaia",
        "Paragauya", "Paraguaia",
        "Paraguya", "Paraguaia",
        "Praguaya", "Paraguaia",
        "16/07/2014", "Paraguaia",
        "Brasileña", "Brasileira",
        "Paraguay", "Paraguaia",
        "Brasilerera", "Brasileira",
        "Brasilero", "Brasileira",
        "5.850.777", "Paraguaia",
        "Basileño", "Paraguaia",
        "5.105.608", "Paraguaia",
        "Parguaya", "Paraguaia",
        "13/03/1972", "Paraguaia",
        "M", "Masculino",
        "F", "Feminino",
        "ESCasado", "Casado",
        "ESSolteiro", "Solteiro",
        "ESSoltero", "Solteiro",
        "ESParaguaya", "Solteiro",
        "ESSoltera", "Solteiro",
        "ESMenor", "Solteiro",
        "ESCasada", "Casado",
        "ESSolter0", "Solteiro",
        "ESSotero", "Solteiro",
        "ESSolltero", "Solteiro"

    };

}
